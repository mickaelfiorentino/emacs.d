#+TITLE: Emacs Configuration
#+AUTHOR: Mickael Fiorentino
#+EMAIL: mickael.fiorentino@mailbox.org

* Basics
** Defaults
#+BEGIN_SRC emacs-lisp
  (setq-default
   load-prefer-newer t                                 ; Prefer newer file by default
   inhibit-startup-screen t                            ; Disable start-up screen
   initial-scratch-message ""                          ; Empty the initial *scratch* buffer
   visible-bell 1                                      ; Please don't beep at me
   indent-tabs-mode nil                                ; Stop using tabs to indent
   tab-width 4                                         ; Set width for tabs
   line-spacing 3                                      ; Better readability
   tab-always-indent 'complete                         ; Tabs perform completion
   make-backup-files nil                               ; No backup files
   auto-save-default nil                               ; No auto-save
   mouse-yank-at-point t                               ; Yank at point rather than pointer
   fill-column 100                                     ; Set width for automatic line breaks
   gc-cons-threshold            50000000               ; Garbage collection size : 50Mb
   large-file-warning-threshold 100000000              ; File size limit warning : 100Mb
   delete-by-moving-to-trash t                         ; Delete files to trash
   require-final-newline t                             ; May prevent some problems
   display-time-format "%H:%M"                         ; Format the time string
   scroll-conservatively most-positive-fixnum          ; Always scroll by one line
   scroll-preserve-screen-position t                   ; Preserve screen position
   scroll-margin 0                                     ; Add a margin when scrolling vertically
   mouse-wheel-scroll-amount '(1 ((shift) . 1))        ; Mouse scroll by 1 line
   mouse-wheel-progressive-speed t                     ; Keep same speed
   select-enable-clipboard t                           ; Merge system's and Emacs' clipboard
   show-trailing-whitespace nil                        ; Display trailing whitespaces
   uniquify-buffer-name-style 'forward                 ; uniquify buffer names
   x-stretch-cursor t)                                 ; Stretch cursor to the glyph width
  (column-number-mode t)                               ; Column number next to line number
  (global-subword-mode t)                              ; Iterate through CamelCase words
  (delete-selection-mode nil)                          ; Replace region when inserting text
  (global-auto-revert-mode t)                          ; Automatically revert buffer from file
  (display-time-mode t)                                ; Enable time in the mode-line
  (show-paren-mode t)                                  ; Show matching parenthesis
  (set-default-coding-systems 'utf-8)                  ; Default to utf-8 encoding
  (prefer-coding-system 'utf-8)                        ; Prefer utf-8
  (fset 'yes-or-no-p 'y-or-n-p)                        ; Replace yes/no prompts with y/n
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode) ; Wrap text at end-of-line in text-mode
  (add-hook 'before-save-hook 'whitespace-cleanup)     ; Delete whitespaces before saving
  (setq auto-window-vscroll nil)                       ; Avoid lag
  (when (display-graphic-p)
   (fringe-mode 0)                                     ; Fringes
   (tool-bar-mode -1)                                  ; Tool-bar
   (menu-bar-mode -1)                                  ; Menu-bar
   (scroll-bar-mode -1))                               ; Scroll bar
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET")         'newline-and-indent)
  (global-set-key (kbd "M-g")         'goto-line)
  (global-set-key (kbd "M-u")         'undo)
  (global-set-key (kbd "M-/")         'shell-command-on-region)
  (global-set-key (kbd "C-x C-b")     'ibuffer)
  (global-set-key (kbd "<C-return>")  "\C-a\C- \C-e\M-w\C-j\C-y") ; Duplicate line
  (global-set-key (kbd "C-c t")       'org-time-stamp)
  (global-set-key (kbd "C-c q")       'quick-calc)
  (global-set-key (kbd "C-c u")       'upcase-dwim)
  (global-set-key (kbd "C-c l")       'downcase-dwim)
  (global-set-key (kbd "C-c a")       'align-regexp)
  ;; (global-set-key (kbd "<mouse-5>")   'next-buffer)
  ;; (global-set-key (kbd "<mouse-4>")   'previous-buffer)
#+END_SRC

** Packages

 - Melpa and Org repos
 #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
   (package-initialize)
 #+END_SRC

 - Install packages if they are not installed
 - ~:ensure t~ must be specified for each package we want to auto install
 #+BEGIN_SRC emacs-lisp
   (mapc
    (lambda (package)
      (if (not (package-installed-p package))
          (progn
            (package-refresh-contents)
            (package-install package))))
      '(use-package diminish bind-key))

   (eval-when-compile (require 'use-package))
   (require 'diminish)
   (require 'bind-key)
   (setq use-package-always-ensure nil)
 #+END_SRC

** Daemon

- Allow access from emacsclient
#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start))
  (when (equal window-system 'w32)
    (setq server-use-tcp t))
)
#+END_SRC

- Alias in .bashrc:
#+BEGIN_SRC shell
  alias e="emacsclient -n"
#+END_SRC

** Desktops
#+BEGIN_SRC emacs-lisp
  (use-package desktop+
    :ensure t
    :bind
    ("C-c d" . desktop+-load)
    :hook
    (after-init . (lambda () (desktop+-load "default")))
    :config
    (setq desktop-save t)
    (setq desktop-buffers-not-to-save "^$")
    (setq desktop-files-not-to-save (not desktop-buffers-not-to-save))
    (setq desktop+-base-dir (expand-file-name "desktop/" user-emacs-directory)))
#+END_SRC

- Save History
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init
  (savehist-mode 1)
  :config
  (setq savehist-file "~/.emacs.d/savehist")
  (setq history-length 30000)
  (setq history-delete-duplicates nil)
  (setq savehist-save-minibuffer-history t)
  (setq savehist-additional-variables
    '(kill-ring
      search-ring
      regexp-search-ring
      last-kbd-macro
      kmacro-ring
      shell-command-history))
)
#+END_SRC

- Save places
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init
  (save-place-mode 1)
  :config
  (setq save-place-file "~/.emacs.d/saveplace")
  (setq save-place-forget-unreadable-files t)
)
#+END_SRC

** Custom
  #+BEGIN_SRC emacs-lisp
    (use-package cus-edit
    :config
    (setq custom-file "~/.emacs.d/custom.el")
    (unless (file-exists-p custom-file)
      (write-region "" nil custom-file))
    (load custom-file))
  #+END_SRC

** Themes
- Global theme
#+BEGIN_SRC emacs-lisp
  (use-package modus-vivendi-theme
    :if (or (display-graphic-p) (>= (tty-display-color-cells) 256))
    :config
    (load-theme 'modus-vivendi t t))
#+END_SRC

- Smart-mode-line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
:if window-system
:ensure t
:config
(setq sml/no-confirm-load-theme t)
(setq sml/theme 'respectful) ;; automatic light my-light dark respectful
:hook (after-init . sml/setup))
#+END_SRC

* Navigation
** Windows
#+BEGIN_SRC emacs-lisp
    (use-package window
      :if window-system
      :bind
      ("M-0"   . delete-window)
      ("M-1"   . delete-other-windows)
      ("M-2"   . split-window-vertically)
      ("M-3"   . split-window-horizontally)
      ("M-o"   . other-window)
      ("M-O"   . other-frame)
      ("M-k"   . kill-buffer-and-window)
      :hook
      ((help-mode . visual-line-mode)
       (custom-mode . visual-line-mode))
      :init
      (setq help-window-select t)           ; Focus new help windows when opened
      (setq window-combination-resize t)    ; Resize windows proportionally
      (setq display-buffer-alist
            '(
              ("\\*\\(Flycheck\\|Package-Lint\\|Backtrace\\|Warnings\\|Compile-Log\\|Messages\\)\\*"
               (display-buffer-in-side-window)
               (window-height . 0.33)
               (side . bottom)
               (slot . 1)
               (window-parameters . ((no-other-window . t))))
              (".*\\*Completions.*"
               (display-buffer-in-side-window)
               (window-height . 0.33)
               (side . bottom)
               (slot . 0)
               (window-parameters . ((no-other-window . t))))
              (".*\\*Occur.*"
               (display-buffer-in-side-window)
               (window-height . 0.33)
               (side . bottom)
               (slot . 0)
               (window-parameters . ((no-other-window . t))))
              ("\\*e?shell.*"
               (display-buffer-in-side-window)
               (window-height . 0.33)
               (side . bottom)
               (slot . 1)
               (inhibit-same-window . nil))
              ("\\*Python*"
               (display-buffer-in-side-window)
               (window-height . 0.33)
               (side . bottom)
               (slot . 1)
               (inhibit-same-window . nil))
              ;; left side window
              ("\\*Help.*"
               (display-buffer-in-side-window)
               (window-width . 0.33)
               (side . left)
               (slot . 0)
               (window-parameters . ((no-other-window . t))))
              ;; right side window
              ("\\*Faces\\*"
               (display-buffer-in-side-window)
               (window-width . 0.33)
               (side . right)
               (slot . 0)
               (window-parameters . ((no-other-window . t)
                                     (mode-line-format . (" "
                     mode-line-buffer-identification)))))
              ("\\*Custom.*"
               (display-buffer-in-side-window)
               (window-width . 0.33)
               (side . right)
               (slot . 1))))
  )
#+END_SRC
** Minibuffer
*** Prescient
#+BEGIN_SRC emacs-lisp
(use-package prescient
 :ensure t
 :config
 (prescient-persist-mode +1))
#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
 :ensure t
 :diminish (ivy-mode . "")
 :config (ivy-mode)
 :bind (("C-x b" . ivy-switch-buffer)
        ("C-="   . ivy-switch-buffer)
        ("C-x B" . ivy-switch-buffer-other-window)
        ("M-H"   . ivy-resume))
 :custom
 (ivy-re-builders-alist
 '((t . ivy--regex-ignore-order))) ;; allow input not in order
 (ivy-height 10)
 (ivy-count-format "(%d/%d)")
 (ivy-display-style 'fancy)
 (ivy-initial-inputs-alist nil)
 (ivy-wrap nil)
 (ivy-use-virtual-buffers nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
 :ensure t
 :after ivy
 :config (ivy-prescient-mode))
#+END_SRC

*** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
 :ensure t
 :after ivy
 :diminish (counsel-mode . "")
 :bind (("M-x"     . counsel-M-x)
 ("C-x C-f" . counsel-find-file)
 ("M-l"     . counsel-imenu)
 ("C-c h"   . counsel-command-history)
 ("C-M-s"   . counsel-git-grep)))
#+END_SRC

** Search

#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :bind
    (("M-s M-o" . multi-occur)
     ("M-s %" . my/isearch-query-replace-symbol-at-point)
     :map minibuffer-local-isearch-map
     ("<tab>" . isearch-complete-edit)
     :map isearch-mode-map
     ("<tab>" . isearch-complete)
     ("C-SPC" . my/isearch-mark-and-exit))
    :config
    (setq search-highlight t)
    (setq search-whitespace-regexp ".*?")
    (setq isearch-lax-whitespace t)
    (setq isearch-regexp-lax-whitespace nil)
    (setq isearch-lazy-highlight t)

    (defun my/isearch-mark-and-exit ()
      "Mark the current search string and exit the search."
      (interactive)
      (push-mark isearch-other-end t 'activate)
      (setq deactivate-mark nil)
      (isearch-done))

    (defun my/isearch-query-replace-symbol-at-point ()
      "Run `query-replace-regexp' for the symbol at point."
      (interactive)
      (isearch-forward-symbol-at-point)
      (isearch-query-replace-regexp))
  )
#+END_SRC
** Projects Management
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
   :ensure t
   :diminish (projectile-mode . "")
   :config (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   :init (projectile-mode)
)
#+END_SRC

*** Speedbar

#+BEGIN_SRC emacs-lisp
(use-package speedbar
   :config
   (setq speedbar-use-images nil
         speedbar-show-unknown-files t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar
   :ensure t
   :after speedbar
   :config
   (setq sr-speedbar-right-side nil
         sr-speedbar-max-width 40
         sr-speedbar-width 30
         sr-speedbar-default-width 30
         sr-speedbar-skip-other-window-p t))
 #+END_SRC

*** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :commands
  (neotree-toggle my/neotree-project-dir)
  :bind
  (("<f8>" . my/neotree-project-dir))
  :functions
  (neo-global--window-exists-p neotree-dir neotree-find)
  :config
  (setq neo-theme 'arrow)

  ;; from https://www.emacswiki.org/emacs/NeoTree
  (defun my/neotree-project-dir ()
  "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root."))))
  )
#+END_SRC

* Edit
** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-x w" . mc/edit-lines)
         ("C-M-<down>" . mc/mark-next-like-this)
         ("C-M-<up>" . mc/mark-previous-like-this)))
#+END_SRC

** Completion
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :bind   ("<C-tab>" . auto-complete)
  :config
  (require 'auto-complete-config)
  (ac-config-default)
  (global-auto-complete-mode t)
  (setq ac-auto-start nil)
  (setq ac-auto-show-menu t)
  (setq ac-auto-show-menu 0.8)
  (setq ac-menu-height 20)
  (setq ac-dwim t)
  (setq ac-use-comphist t)
  (setq ac-candidate-limit nil)
  (setq ac-use-menu-map t)
  (define-key ac-menu-map (kbd "M-n") 'ac-next)
  (define-key ac-menu-map (kbd "M-p") 'ac-previous)
  (define-key ac-completing-map (kbd "M-h") 'ac-quick-help)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package dabbrev
  ;;   :commands
  ;;   (dabbrev-expand dabbrev-completion)
  ;;   :bind
  ;;   ("<backtab>" . dabbrev-completion)
  ;;   :config
  ;;   (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
  ;;   (setq dabbrev-abbrev-skip-leading-regexp "\\$\\|\\*\\|/\\|=")
  ;;   (setq dabbrev-backward-only t)
  ;;   (setq dabbrev-case-distinction nil)
  ;;   (setq dabbrev-case-fold-search t)
  ;;   (setq dabbrev-case-replace nil)
  ;;   (setq dabbrev-check-other-buffers t)
  ;;   (setq dabbrev-eliminate-newlines nil)
  ;;   (setq dabbrev-upcase-means-case-search t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package hippie-exp
  ;;   :after dabbrev
  ;; ;;  :hook
  ;; ;;  (prog-mode . (lambda () (local-set-key (kbd "<backtab>") 'hippie-expand)))
  ;;   :bind
  ;;   ("<C-tab>" . hippie-expand)
  ;;   :config
  ;;   (setq hippie-expand-verbose nil)
  ;;   (setq hippie-expand-try-functions-list
  ;;         '(try-expand-dabbrev-visible
  ;;           try-expand-dabbrev
  ;;           try-expand-dabbrev-all-buffers
  ;;           try-expand-dabbrev-from-kill
  ;;           try-expand-list-all-buffers
  ;;           try-expand-list
  ;;           try-expand-line-all-buffers
  ;;           try-expand-line
  ;;           try-complete-file-name-partially
  ;;           try-complete-file-name
  ;;           try-expand-all-abbrevs)))
#+END_SRC

** Expand-Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
   :ensure t
   :bind (("C-."  . er/expand-region)
          ("C-M-." . er/contract-region))
)
#+END_SRC

** YaSnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
   :ensure t
   :diminish
   (yas-minor-mode . "")
   :config
   (setq yas-verbosity 1)
   (setq yas-wrap-around-region t)
   (add-to-list #'yas-snippet-dirs "~/.emacs.d/emacs.d/yasnippets")
   :init
   ;; (yas-global-mode)
   (add-hook 'prog-mode-hook #'yas-minor-mode)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
    :ensure t
)
#+END_SRC

* Shell
** shell-mode
#+BEGIN_SRC emacs-lisp
(use-package shell
:init
 (add-hook 'shell-mode-hook
  (lambda ()
   (local-set-key (kbd "C-l") 'comint-clear-buffer)
   (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
)
#+END_SRC

** eshell-mode
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :init
  (add-hook 'eshell-mode-hook
    (lambda ()
      (add-to-list 'eshell-visual-commands "ssh")
      (add-to-list 'eshell-visual-commands "plink")
      (add-to-list 'eshell-visual-commands "git")
      (add-to-list 'eshell-visual-commands "tail")))
  :config
  (setq eshell-scroll-to-bottom-on-input 'all)
  (setq eshell-error-if-no-glob t)
  (setq eshell-hist-ignoredups t)
  (setq eshell-save-history-on-exit t)
  (setq eshell-prefer-lisp-functions nil)
  (setq eshell-destroy-buffer-when-process-dies t)
)
#+END_SRC

** Tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
:config
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
(setq tramp-default-method "plinkx")
(setq auto-revert-remote-files t)
(setq remote-file-name-inhibit-cache nil) ;; cache file-name forever
(setq vc-ignore-dir-regexp
  (format "%s\\|%s"
    vc-ignore-dir-regexp
    tramp-file-name-regexp))

;; Default tramp method is "remote": plinkx on windows, sshx otherwise
(defconst mf/tramp-default-method
  (if (equal window-system 'w32)
    (cdr (assoc "plinkx" tramp-methods))
    (cdr (assoc "sshx" tramp-methods)))
"The default method for remote access")

(add-to-list 'tramp-methods
  (list "remote" mf/tramp-default-method))

;; Remote shell is always bash
(connection-local-set-profile-variables
  'remote-bash
  '((explicit-shell-file-name . "/bin/bash")
    (explicit-bash-args . ("-i"))))

(connection-local-set-profiles
  '(:application tramp
    :protocol "remote")
    'remote-bash)
)
#+END_SRC

To open a (remote) file with =sudo= follow the explanation from [[https://www.emacswiki.org/emacs/TrampMode#toc17][EmacsWiki]]:
- Sudo on /remote/ with any /user/ when ssh/config knows /abbrev/:
  ~C-x C-f /ssh:abbrev|sudo:user@remote:/path/to/file~

** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
   :config
   (put 'dired-find-alternate-file 'disabled nil)
   (setq dired-listing-switches "-laGh1v --group-directories-first")
   :init (add-hook 'dired-load-hook (lambda () (load "dired-x")))
   :bind (:map dired-mode-map
               ("<" . (lambda () (interactive) (find-alternate-file "..")))
               ("RET" . dired-find-alternate-file)))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
 :ensure t
 :bind
 ("C-x g" . magit-status)
 :config
 (setq magit-git-executable "git")
 (setq auto-revert-buffer-list-filter
       'magit-auto-revert-repository-buffers-p)
)
#+END_SRC

* Write
** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    ;; :init
    ;; (org-reload)
    :bind
    ("C-c n" . my/narrow-or-widen-dwim)
    :config
    (setq org-src-fontify-natively t)
    (setq org-todo-keywords '((sequence "TODO" "PROCESS" "|" "DONE" )))
    (setq org-startup-folded (quote content))
    (setq org-startup-indented t)
    (setq org-hide-leading-stars t)
    (setq org-hide-emphasis-markers t)
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
      '("pdflatex --shell-escape --interaction nonstopmode %f"
        "bibtex %b"
        "pdflatex --shell-escape --interaction nonstopmode %f"
        "pdflatex --shell-escape --interaction nonstopmode %f"))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))
    (add-to-list 'org-latex-packages-alist '("" "minted"))

    (defun my/narrow-or-widen-dwim ()
    " Toggle narrow/widen region
      If the buffer is narrowed it widens, otherwise it narrows.
    "
    (interactive)
    (cond ((buffer-narrowed-p) (widen))
      ((region-active-p) (narrow-to-region (region-beginning) (region-end)))
      ((equal major-mode 'org-mode) (org-narrow-to-subtree))
      (t (error "Please select a region to narrow to")))
    )
  )
#+END_SRC

** Outline
#+BEGIN_SRC emacs-lisp
(use-package outline-magic
   :ensure t
   :after outline
   :bind
   (:map outline-minor-mode-map
     ("M-<up>"    . outline-move-subtree-up)
     ("M-<down>"  . outline-move-subtree-down)
     ("M-<left>"  . outline-promote)
     ("M-<right>" . outline-demote)
     ("C-<down>"  . outline-next-heading)
     ("C-<up>"    . outline-previous-heading))
   :init
   (add-hook 'outline-mode-hook (lambda () (require 'outline-magic)))
   (add-hook 'outline-minor-mode-hook (lambda ()
       (require 'outline-magic)))
       (define-key outline-minor-mode-map [(tab)] 'outline-cycle)
   :config
   (setq outline-cycle-emulate-tab t)
)
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
   :ensure t
   :mode (("\\.md\\'"       . markdown-mode)
          ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** Dokuwiki

- Login
#+BEGIN_SRC emacs-lisp
(use-package dokuwiki
   :ensure t
   :config
   (setq dokuwiki-xml-rpc-url "https://intranet.grm.polymtl.ca/wiki/lib/exe/xmlrpc.php")
   (setq dokuwiki-login-user-name "fiorentino"))
#+END_SRC

- Dokuwiki mode
#+BEGIN_SRC emacs-lisp
(use-package dokuwiki-mode
   :ensure t
   :mode "\\.dwiki\\'"
   :hook (dokuwiki-mode . outline-minor-mode)
   :bind (:map dokuwiki-mode-map
               ("C-c C-l" . dokuwiki-list-pages)
               ("C-c C-s" . dokuwiki-save-page)))
#+END_SRC

** PDF
#+BEGIN_SRC emacs-lisp
;;(use-package pdf-tools
;;  :if (string-match-p "fc"
;;         (cond ((not operating-system-release) "") (t operating-system-release)))
;;  :config
;;  (pdf-loader-install)
;;  (setq-default pdf-view-display-size 'fit-width))
#+END_SRC

** Latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
     :defer t
     :ensure auctex
     :mode ("\\.tex\\'" . LaTeX-mode)
     :init
     (setq yas-minor-mode nil)
     (setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq TeX-source-correlate-start-server t)
     (setq LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape -synctex=1 %S%(PDFout)")))
     :hook
     ((LaTeX-mode . TeX-source-correlate-mode)
      (LaTeX-mode . outline-minor-mode)
      (LaTeX-mode . TeX-fold-mode)
      (LaTeX-mode . (lambda () (define-key LaTeX-mode-map
        (kbd "C-x C-s") (lambda () (interactive) (save-buffer) (TeX-fold-buffer)))))
      (TeX-after-compilation-finished-functions . TeX-revert-document-buffer))
     :config
     (setq outline-promotion-headings
         '("\\chapter" "\\section" "\\subsection" "\\subsubsection" "\\paragraph" "\\subparagraph")))
#+END_SRC

** Bibtex
[[http://joostkremers.github.io/ebib/][Ebib]] is a BibTeX database manager

#+BEGIN_SRC emacs-lisp
  (use-package ebib
    :ensure t
    :bind
    (("C-c e" . 'ebib)
     ("M-i"   . 'ebib-insert-citation)
    :map ebib-multiline-mode-map
     ("C-c C-c" . 'ebib-cancel-multiline-buffer))
    :config
    (setq ebib-bib-search-dirs '("~/PhD/Biblio/"))
    (setq ebib-preload-bib-files '("~/PhD/Biblio/Library.bib"))
    (setq ebib-notes-use-single-file "~/PhD/Biblio/Library.org")
    (setq ebib-index-window-size 15)
    (setq ebib-notes-template "** %T\n:PROPERTIES:\n%K\n:DOI: %D\n:FILE: %F\n:END:\n>|<")
    (if (equal window-system 'w32)
      (setq ebib-file-associations '(("pdf" . "C:\\Program Files (x86)\\SumatraPDF\\SumatraPDF.exe")))
      (setq ebib-file-associations '(("pdf" . "evince"))))
    (remove-hook 'ebib-notes-new-note-hook 'org-narrow-to-subtree)
    (remove-hook 'ebib-notes-open-note-after-hook 'org-narrow-to-subtree))
#+END_SRC

** spell-check

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :bind
  (("C-c w" . 'ispell-word)
   ("C-c r" . 'ispell-region))
  :config
  (when (equal window-system 'w32)
    (setq ispell-program-name "C:\\Program Files\\Hunspell\\bin\\hunspell.exe")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :init
  (setq flyspell-use-meta-tab nil)
  (setq flyspell-auto-correct-binding (kbd "C-#"))
  :hook
  (LaTeX-mode . turn-on-flyspell))
#+END_SRC

* Code
** VHDL
#+BEGIN_SRC emacs-lisp
(use-package vhdl-mode
:bind (:map vhdl-mode-map
       ("M-i" . vhdl-align-region)
       ( " "  . nil))
:config
(setq vhdl-standard (quote (08 nil))))
#+END_SRC

** Verilog
#+BEGIN_SRC emacs-lisp
(use-package verilog-mode
   :mode (("\\.[st]*v[hp]*\\'" . verilog-mode)
          ("\\.f\\'"           . verilog-mode)
          ("\\.psl\\'"         . verilog-mode)
          ("\\.vams\\'"        . verilog-mode)
          ("\\.vinc\\'"        . verilog-mode))
   :config
     (setq verilog-indent-level             4)             ; 3
     (setq verilog-indent-level-module      4)             ; 3
     (setq verilog-indent-level-declaration 4)             ; 3
     (setq verilog-indent-level-behavioral  0)             ; 3
     (setq verilog-indent-level-directive   0)             ; 1
     (setq verilog-case-indent              4)             ; 2
     (setq verilog-tab-always-indent        t)             ; t
     (setq verilog-indent-begin-after-if    nil)           ; t
     (setq verilog-auto-newline             nil)           ; t
     (setq verilog-auto-indent-on-newline   t)             ; t
     (setq verilog-minimum-comment-distance 10)            ; 10
     (setq verilog-indent-begin-after-if    t)             ; t
     (setq verilog-auto-lineup              'declarations) ; 'declarations
     (setq verilog-align-ifelse             t)             ; nil
     (setq verilog-auto-endcomments         nil)           ; t
     (setq verilog-tab-to-comment           nil)           ; nil
     (setq verilog-date-scientific-format   t))            ; t
   #+END_SRC

** TCL
#+BEGIN_SRC emacs-lisp
(use-package tcl
:hook
(inferior-tcl-mode . (lambda () (local-set-key (kbd "C-l") 'comint-clear-buffer)))
:mode
(("\\.tcl\\'" . tcl-mode)
 ("\\.sdc\\'" . tcl-mode)
 ("\\.xdc\\'" . tcl-mode)
 ("\\.do\\'"  . tcl-mode))
:config
(setq tcl-application "tclsh")
(setq tcl-tab-always-indent nil))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :mode
  ("\\.py\\'" . python-mode)
  :hook
  (inferior-python-mode . (lambda () (local-set-key (kbd "C-l") 'comint-clear-buffer)))
  :config
  (setq python-shell-interpreter "python3")
  (setq indent-tabs-mode nil)
  (setq python-indent 4))
#+END_SRC

** C
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
   (lambda () (setq-default c-default-style "linux"
                            c-basic-offset  4)))
#+END_SRC

** ASM
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.S\\'" . asm-mode))
(add-hook 'asm-mode-hook
   (lambda () (progn (setq asm-comment-char "//")
                     (setq comment-start "//")
                     (setq comment-add 0))))
#+END_SRC
