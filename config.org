#+STARTUP: overview
#+AUTHOR: Mickael Fiorentino

* Defaults
#+BEGIN_SRC emacs-lisp
  (setq-default
   delete-by-moving-to-trash t                      ; Delete files to trash
   display-time-format "%H:%M"                      ; Format the time string
   fill-column 100                                  ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Stop using tabs to indent
   tab-width 4                                      ; Set width for tabs
   tab-always-indent 'complete                      ; Tabs perform completion
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   make-backup-files nil                            ; No backup files
   auto-save-default nil                            ; No auto-save
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 2                                  ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   uniquify-buffer-name-style 'forward              ; uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   visible-bell 1                                   ; Please don't beep at me
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (delete-selection-mode 1)                         ; Replace region when inserting text
  (display-time-mode 1)                             ; Enable time in the mode-line
  (show-paren-mode 1)                               ; Show matching parenthesis
  (desktop-save-mode 1)                             ; Save desktop
  (when (display-graphic-p)
    (fringe-mode 0)                                 ; Disable fringes
    (menu-bar-mode -1)                              ; Disable the menu bar
    (tool-bar-mode -1)                              ; Disable tool-bar
    (scroll-bar-mode -1))                           ; Disable Scroll bar
#+END_SRC

- Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET")         'newline-and-indent)  
  (global-set-key (kbd "M-0")         'delete-window)
  (global-set-key (kbd "M-1")         'delete-other-windows)
  (global-set-key (kbd "M-2")         'split-window-vertically)
  (global-set-key (kbd "M-3")         'split-window-horizontally)
  (global-set-key (kbd "M-o")         'other-window)
  (global-set-key (kbd "M-u")         'undo)
  (global-set-key (kbd "M-k")         'kill-buffer-and-window)
  (global-set-key (kbd "M-r")         'replace-string)
  (global-set-key (kbd "C-x C-b")     'ibuffer)
  (global-set-key (kbd "C-r")         'query-replace)
  (global-set-key (kbd "C-S-r")       'query-replace-regexp)
  (global-set-key (kbd "M-g")         'goto-line)
  (global-set-key (kbd "<C-return>")  "\C-a\C- \C-e\M-w\C-j\C-y") ; Duplicate line
  (global-set-key (kbd "C-c h")       'counsel-command-history)

#+END_SRC


* Packages
** Sources

- Add Melpa and org repos
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  ;; (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC

- Add a local directory for custom elisp code
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp/" user-emacs-directory))
#+END_SRC

** use-package

- Install packages if they are not installed
#+BEGIN_SRC emacs-lisp
(mapc
 (lambda (package)
   (if (not (package-installed-p package))
       (progn
         (package-refresh-contents)
         (package-install package))))
   '(use-package diminish bind-key))

(eval-when-compile (require 'use-package))
(require 'diminish)
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC


* Emacs Daemon
- Allow access from emacsclient
#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (unless (server-running-p) (server-start)))
#+END_SRC

- Alias in .bashrc:
#+BEGIN_SRC shell
alias e="emacsclient -n"
#+END_SRC


* Navigation

** Silver Surfer ([[https://github.com/ggreer/the_silver_searcher][ag]])
#+BEGIN_SRC emacs-lisp
(defvar executable-ag-available
  (executable-find "ag"))

(use-package ag
  :if executable-ag-available
  :bind
  ("M-?" . ag-project))
#+END_SRC

** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("M-x"     . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-M-s"   . counsel-ag)
         ("C-="     . counsel-ibuffer)))
#+END_SRC
   
** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind
  ("C-s" . swiper))
#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode . "")
  :bind 
  (:map ivy-mode-map ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 10)
  (setq ivy-count-format "(%d/%d)")
  (setq ivy-display-style 'fancy)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
  ;; allow input not in order
  '((t   . ivy--regex-ignore-order))))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->")         'mc/mark-next-like-this)
  (global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this))
#+END_SRC


* Shell
 - New Shell
 #+BEGIN_SRC emacs-lisp
 (defun new-shell ()
     "creates a shell with a given name"
     (interactive);; "Prompt\n shell name:")
     (let ((shell-name (read-string "shell name: " nil)))
       (shell (concat "*" shell-name "*"))))

 (global-set-key (kbd "C-c t") 'new-shell)
 #+END_SRC
 
 - Clear shell
 #+BEGIN_SRC emacs-lisp
 (add-hook 'shell-mode-hook
           (lambda ()
             (local-set-key (kbd "C-l") 'comint-clear-buffer)))
 #+END_SRC
 
 - Color support
 #+BEGIN_SRC emacs-lisp
 (add-hook 'shell-mode-hook
           (lambda ()
             (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
 #+END_SRC


* Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC


* Dired
  - Load Dired-X
    #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-load-hook
    (function (lambda () (load "dired-x"))))
    #+END_SRC

  - Reuse buffer when visiting parent firectory 
    #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-mode-hook
      (lambda () (define-key dired-mode-map (kbd "^")
         (lambda () (interactive) (find-alternate-file "..")))))
    #+END_SRC


* Version Control
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+END_SRC


* Org
- TODOs
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO" "PROCESS" "|" "DONE" )))
#+END_SRC

- Export
#+BEGIN_SRC emacs-lisp
(require 'ox)
(setq org-latex-listings 'minted)
(setq org-latex-pdf-process
      '("pdflatex --shell-escape --interaction nonstopmode %f"
        "bibtex %b"
        "pdflatex --shell-escape --interaction nonstopmode %f"
        "pdflatex --shell-escape --interaction nonstopmode %f"))
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))
(add-to-list 'org-latex-packages-alist '("" "minted"))
#+END_SRC


* Latex
- Use auctex + evince + synctex
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :config
  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o"))
        TeX-view-program-selection '((output-pdf "Evince"))
        TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode))

;; (setq LaTeX-command-style '(("" "%(PDF)%(latex) --shell-escape %S%(PDFout)")))  
#+END_SRC


* Bibliography
  
** Ivy-Bibtex
#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :ensure t
  :config
  (autoload 'ivy-bibtex "ivy-bibtex" "" t)
  (setq ivy-re-builders-alist
      '((ivy-bibtex . ivy--regex-ignore-order)
        (t . ivy--regex-plus)))
  :init
  (setq bibtex-completion-bibliography "~/Projects/research/bibliography/Library.bib")
  (setq bibtex-completion-notes-path   "~/Projects/research/bibliography/Library.org")
  (setq bibtex-completion-pdf-symbol   "⌘")
  (setq bibtex-completion-notes-symbol "✎")
  (setq bibtex-completion-pdf-open-function 
       (lambda (fpath)
           (call-process "evince" nil 0 nil fpath))))
#+END_SRC
   
** Org-Ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :after org
    :init
    (setq org-ref-default-bibliography '("~/Projects/research/bibliography/Library.bib"))
    (setq org-ref-bibliography-notes   "~/Projects/research/bibliography/Library.org")
    (setq org-ref-completion-library   'org-ref-ivy-cite))
#+END_SRC
   

* VHDL 
#+BEGIN_SRC emacs-lisp
(add-hook 'vhdl-mode-hook
    (lambda()
        (local-set-key (kbd "C-c C-d") 'vhdl-align-region)))
#+END_SRC


* TCL
- Associate .sdc files (/synopsys design constraints/) to tcl-mode  
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.sdc\\'" . tcl-mode))
(add-hook 'inferior-tcl-mode-hook
           (lambda ()
             (local-set-key (kbd "C-l") 'comint-clear-buffer)))

#+END_SRC


* C
 #+BEGIN_SRC emacs-lisp
 (add-hook 'c-mode-common-hook 'hs-minor-mode)
 (setq c-default-style "linux")
 #+END_SRC


* ASM
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.S\\'" . asm-mode))

 (add-hook 'asm-mode-hook
     (lambda () (progn (setq asm-comment-char "//") 
                       (setq comment-start "//")
                       (setq comment-add 0))))

 #+END_SRC


* Python
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
    (lambda ()
    (setq indent-tabs-mode nil)
    (setq python-indent 4)))
#+END_SRC





