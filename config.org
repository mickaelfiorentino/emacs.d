#+TITLE: Emacs Configuration
#+AUTHOR: Mickael Fiorentino
#+EMAIL: mickael.fiorentino@mailbox.org

* Basics
** Defaults
#+BEGIN_SRC emacs-lisp
  (setq-default
   load-prefer-newer t                                 ; Prefer newer file by default
   inhibit-startup-screen t                            ; Disable start-up screen
   initial-scratch-message ""                          ; Empty the initial *scratch* buffer
   visible-bell 1                                      ; Please don't beep at me
   indent-tabs-mode nil                                ; Stop using tabs to indent
   tab-width 4                                         ; Set width for tabs
   line-spacing 3                                      ; Better readability
   tab-always-indent 'complete                         ; Tabs perform completion
   make-backup-files nil                               ; No backup files
   auto-save-default nil                               ; No auto-save
   mouse-yank-at-point t                               ; Yank at point rather than pointer
   fill-column 100                                     ; Set width for automatic line breaks
   gc-cons-threshold            50000000               ; Garbage collection size -> 50Mb
   large-file-warning-threshold 100000000              ; File size limit warning -> 100Mb
   delete-by-moving-to-trash t                         ; Delete files to trash
   require-final-newline t                             ; May prevent some problems
   display-time-format "%H:%M"                         ; Format the time string
   help-window-select t                                ; Focus new help windows when opened
   scroll-conservatively most-positive-fixnum          ; Always scroll by one line
   scroll-preserve-screen-position t                   ; Preserve screen position
   scroll-margin 0                                     ; Add a margin when scrolling vertically
   mouse-wheel-scroll-amount '(1 ((shift) . 1))        ; Mouse scroll by 1 line
   mouse-wheel-progressive-speed t                     ; Keep same speed
   select-enable-clipboard t                           ; Merge system's and Emacs' clipboard
   show-trailing-whitespace nil                        ; Display trailing whitespaces
   uniquify-buffer-name-style 'forward                 ; uniquify buffer names
   window-combination-resize t                         ; Resize windows proportionally
   x-stretch-cursor t)                                 ; Stretch cursor to the glyph width
  (column-number-mode t)                               ; Column number next to line number
  (global-subword-mode t)                              ; Iterate through CamelCase words
  (delete-selection-mode t)                            ; Replace region when inserting text
  (global-auto-revert-mode t)                          ; Automatically revert buffer from file
  (display-time-mode t)                                ; Enable time in the mode-line
  (show-paren-mode t)                                  ; Show matching parenthesis
  (set-default-coding-systems 'utf-8)                  ; Default to utf-8 encoding
  (fset 'yes-or-no-p 'y-or-n-p)                        ; Replace yes/no prompts with y/n
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode) ; Wrap text at end-of-line in text-mode
  (add-hook 'before-save-hook 'whitespace-cleanup)     ; Delete whitespaces before saving
  (when (display-graphic-p)
   (fringe-mode 0)                                     ; Disable fringes
   (menu-bar-mode -1)                                  ; Disable the menu bar
   (tool-bar-mode -1)                                  ; Disable tool-bar
   (scroll-bar-mode -1))                               ; Disable Scroll bar
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET")         'newline-and-indent)
  (global-set-key (kbd "M-0")         'delete-window)
  (global-set-key (kbd "M-1")         'delete-other-windows)
  (global-set-key (kbd "M-2")         'split-window-vertically)
  (global-set-key (kbd "M-3")         'split-window-horizontally)
  (global-set-key (kbd "M-o")         'other-window)
  (global-set-key (kbd "M-O")         'other-frame)
  (global-set-key (kbd "M-k")         'kill-buffer-and-window)
  (global-set-key (kbd "M-g")         'goto-line)
  (global-set-key (kbd "M-u")         'undo)
  (global-set-key (kbd "M-/")         'shell-command-on-region)
  (global-set-key (kbd "C-x C-b")     'ibuffer)
  (global-set-key (kbd "<backtab>")   'dabbrev-completion)
  (global-set-key (kbd "<C-return>")  "\C-a\C- \C-e\M-w\C-j\C-y") ; Duplicate line
  (global-set-key (kbd "C-c h")       'counsel-command-history)
  (global-set-key (kbd "C-c t")       'org-time-stamp)
  (global-set-key (kbd "C-c q")       'quick-calc)
  (global-set-key (kbd "C-c u")       'upcase-dwim)
  (global-set-key (kbd "C-c l")       'downcase-dwim)
  (global-set-key (kbd "C-c a")       'align-regexp)
  (global-set-key (kbd "<mouse-9>")   'next-buffer)
  (global-set-key (kbd "<mouse-8>")   'previous-buffer)
#+END_SRC

** Packages

 - Melpa and Org repos
 #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
   (package-initialize)
 #+END_SRC

 - Install packages if they are not installed
 - ~:ensure t~ must be specified for each package we want to auto install
 #+BEGIN_SRC emacs-lisp
   (mapc
    (lambda (package)
      (if (not (package-installed-p package))
          (progn
            (package-refresh-contents)
            (package-install package))))
      '(use-package diminish bind-key))

   (eval-when-compile (require 'use-package))
   (require 'diminish)
   (require 'bind-key)
   (setq use-package-always-ensure t)
 #+END_SRC
** Daemon

- Allow access from emacsclient
#+BEGIN_SRC emacs-lisp
  (use-package server
   :ensure t
   :config
   (unless (server-running-p) (server-start)))
#+END_SRC

- Alias in .bashrc:
#+BEGIN_SRC shell
  alias e="emacsclient -n"
#+END_SRC

** Desktops

- Desktop+ allows to save/load multiple desktops
#+BEGIN_SRC emacs-lisp
    (use-package desktop+
     :ensure t
     :bind ("C-c d" . desktop+-load)
     :hook (after-init . (lambda () (desktop+-load "default")))
     :config
     (setq desktop-save t)
     (setq desktop-buffers-not-to-save "^$")
     (setq desktop-files-not-to-save (not desktop-buffers-not-to-save))
     (setq desktop+-base-dir (expand-file-name "desktop/" user-emacs-directory))
     (setq savehist-save-minibuffer-history t)
     (setq savehist-additional-variables
       '(kill-ring
         search-ring
         regexp-search-ring
         last-kbd-macro
         kmacro-ring
         shell-command-history))
     :init
     (savehist-mode t)
     (save-place-mode t))
  ;; (add-hook 'after-init-hook (lambda () (desktop+-load "default"))))
#+END_SRC

** Custom
 - Local directory for custom elisp code
 #+BEGIN_SRC emacs-lisp
   (setq my-lisp-directory (concat user-emacs-directory (convert-standard-filename "/lisp/")))
   (add-to-list 'load-path my-lisp-directory)
   (let ((default-directory my-lisp-directory))
        (normal-top-level-add-to-load-path '("."))
        (normal-top-level-add-subdirs-to-load-path))
 #+END_SRC

 - Custom functions
 #+BEGIN_SRC emacs-lisp
 (require 'my-custom-functions)
 (global-set-key (kbd "C-c n") 'narrow-or-widen-dwim)
 (global-set-key (kbd "C-c s") 'toggle-window-split)
 #+END_SRC

 - Local theme directory
 #+BEGIN_SRC emacs-lisp
   (setq my-theme-directory (concat user-emacs-directory (convert-standard-filename "/themes/")))
   (add-to-list 'custom-theme-load-path (concat my-theme-directory "/tango++/"))
   (add-to-list 'custom-theme-load-path (concat my-theme-directory "/sml/"))
 #+END_SRC

** Themes
- Global theme
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
   (load-theme 'tango++ t))
#+END_SRC

- Smart-mode-line
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
   (use-package smart-mode-line
    :ensure t
    :config
     (setq sml/no-confirm-load-theme t)
     (setq sml/theme 'my-light) ;; automatic light my-light dark respectful
    :hook (after-init . sml/setup)))
#+END_SRC

* Navigation
** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
   :ensure t
   :diminish (projectile-mode . "P")
   :config (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   :init (projectile-mode))
#+END_SRC

** Speedbar

- speedbar
#+BEGIN_SRC emacs-lisp
  (use-package speedbar
   :ensure nil
   :config
   (setq speedbar-use-images nil
         speedbar-show-unknown-files t))
#+END_SRC

- sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
   :ensure t
   :after speedbar
   :config
   (setq sr-speedbar-right-side nil
         sr-speedbar-max-width 40
         sr-speedbar-width 30
         sr-speedbar-default-width 30
         sr-speedbar-skip-other-window-p t))
 #+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :commands (neotree-toggle my/neotree-project-dir)
    :bind (("<f8>" . my/neotree-project-dir))
    :functions (neo-global--window-exists-p neotree-dir neotree-find)
    :config
    (setq neo-theme 'arrow)
    ;; from https://www.emacswiki.org/emacs/NeoTree
    (defun my/neotree-project-dir ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root."))))
  )
#+END_SRC
** Ivy

- Basic configuration
#+BEGIN_SRC emacs-lisp
  (use-package ivy
   :ensure t
   :diminish (ivy-mode . "")
   :config (ivy-mode)
   :bind (("C-x b" . ivy-switch-buffer)
          ("C-x B" . ivy-switch-buffer-other-window)
          ("M-H"   . ivy-resume))
   :custom
   (ivy-re-builders-alist
     '((t . ivy--regex-ignore-order))) ;; allow input not in order
   (ivy-height 10)
   (ivy-count-format "(%d/%d)")
   (ivy-display-style 'fancy)
   (ivy-initial-inputs-alist nil)
   (ivy-wrap t)
   (ivy-use-virtual-buffers t))
#+END_SRC

** Counsel

- Using Counsel in addition to Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
   :ensure t
   :after ivy
   :diminish (counsel-mode . "")
   :bind (("M-x"     . counsel-M-x)
          ("C-x C-f" . counsel-find-file)
          ("M-l"     . counsel-imenu)
          ("C-M-s"   . counsel-git-grep)))
#+END_SRC

- Counsel-projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
   :ensure t
   :after ivy
   :bind (("C-=" . counsel-projectile-find-file)))
#+END_SRC

** Swiper

- Using swiper instead of isearch
#+BEGIN_SRC emacs-lisp
  (use-package swiper
   :ensure t
   :after ivy
   :bind ("C-s" . swiper))
#+END_SRC

* Edit
** Multiple Cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
   :ensure t
   :bind (("C->" . mc/mark-next-like-this)
          ("C-<" . mc/mark-previous-like-this)))
#+END_SRC

** Company

- Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
   :ensure t
   :defer t
   :diminish (company-mode . "C")
   :hook (prog-mode . company-mode)
   :config
   (add-to-list 'company-backends 'company-files t)
   (add-to-list 'company-backends 'company-shell-env t)
   (setq company-backends (remove 'company-clang company-backends))
   ;; (cl-pushnew '(company-files company-shell-env) company-backends)
   (setq company-minimum-prefix-length 3
         company-selection-wrap-around t
         company-show-numbers t
         company-tooltip-align-annotations t
         company-require-match nil
         company-dabbrev-downcase nil
         company-dabbrev-ignore-case nil))
#+END_SRC

** Prescient

- Using Prescient to have better defaults
#+BEGIN_SRC emacs-lisp
  (use-package prescient
   :ensure t)
#+END_SRC

- Prescient with Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy-prescient
   :ensure t
   :after ivy
   :config (ivy-prescient-mode))
#+END_SRC

- Prescient with Company
#+BEGIN_SRC emacs-lisp
  (use-package company-prescient
   :ensure t
   :after company
   :config (company-prescient-mode))
#+END_SRC

** Expand-Region

- Easy selection
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
   :ensure t
   :bind (("C-."  . er/expand-region)
          ("C-M-." . er/contract-region)))
#+END_SRC

** YaSnippets

- Snippets engine
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
   :ensure t
   :diminish
   (yas-minor-mode . "Y")
   :config
   (setq yas-verbosity 1)
   (setq yas-wrap-around-region t)
   (add-to-list #'yas-snippet-dirs "~/.emacs.d/emacs.d/yasnippets")
   :init
   ;;(yas-reload-all)
   (yas-global-mode))
#+END_SRC

- Default snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets)
#+END_SRC

* Shell
** Terminal

- Clear shell
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook
   (lambda () (local-set-key (kbd "C-l") 'comint-clear-buffer)))
#+END_SRC

- Color support
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook
   (lambda () (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
#+END_SRC

** Tramp

#+BEGIN_SRC emacs-lisp
  (use-package tramp
   :ensure nil
   :config
   (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
   (setq tramp-default-method "ssh")
   (setq auto-revert-remote-files t)
   (setq remote-file-name-inhibit-cache nil) ;; cache file-name forever
   (setq vc-ignore-dir-regexp
    (format "%s\\|%s"
        vc-ignore-dir-regexp
        tramp-file-name-regexp)))
#+END_SRC

To open a (remote) file with =sudo= follow the explanation from [[https://www.emacswiki.org/emacs/TrampMode#toc17][EmacsWiki]]:
- =sudo= on local host: ~C-x C-f /sudo:: <TAB>~
- With Ivy, the hydra (M-o) r opens file as root
- Sudo on /remote/ with any /user/ when ssh/config knows /abbrev/:
  ~C-x C-f /ssh:abbrev|sudo:user@remote:/path/to/file~

** Dired

- Map ~<~ to "previous" & ~RET~ to "Enter Directory"
- Do not open a new buffer each time
#+BEGIN_SRC emacs-lisp
  (use-package dired
   :ensure nil
   :config
   (put 'dired-find-alternate-file 'disabled nil)
   (setq dired-listing-switches "-laGh1v --group-directories-first")
   :init (add-hook 'dired-load-hook (lambda () (load "dired-x")))
   :bind (:map dired-mode-map
               ("<" . (lambda () (interactive) (find-alternate-file "..")))
               ("RET" . dired-find-alternate-file)))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
   :ensure t
   :bind ("C-x g" . magit-status)
   :config
   (setq auto-revert-buffer-list-filter
         'magit-auto-revert-repository-buffers-p))
#+END_SRC

* Write
** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :config
    (setq org-todo-keywords '((sequence "TODO" "PROCESS" "|" "DONE" )))
    (setq org-startup-folded (quote content))
    (setq org-startup-indented t)
    (setq org-hide-leading-stars t)
    (setq org-hide-emphasis-markers t)
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
     '("pdflatex --shell-escape --interaction nonstopmode %f"
       "bibtex %b"
       "pdflatex --shell-escape --interaction nonstopmode %f"
       "pdflatex --shell-escape --interaction nonstopmode %f"))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (org-reload))
#+END_SRC

** Outline
#+BEGIN_SRC emacs-lisp
(use-package outline-magic
 :ensure t
 :after outline
 :bind
 (:map outline-minor-mode-map
   ("M-<up>"    . outline-move-subtree-up)
   ("M-<down>"  . outline-move-subtree-down)
   ("M-<left>"  . outline-promote)
   ("M-<right>" . outline-demote)
   ("C-<down>"  . outline-next-heading)
   ("C-<up>"    . outline-previous-heading))
 :init
 (add-hook 'outline-mode-hook (lambda () (require 'outline-magic)))
 (add-hook 'outline-minor-mode-hook (lambda ()
     (require 'outline-magic)))
     (define-key outline-minor-mode-map [(tab)] 'outline-cycle)
 :config
 (setq outline-cycle-emulate-tab t))
#+END_SRC
** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
   :ensure t
   :mode (("\\.md\\'"       . markdown-mode)
          ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** Dokuwiki

- Login
#+BEGIN_SRC emacs-lisp
  (use-package dokuwiki
   :ensure t
   :config
   (setq dokuwiki-xml-rpc-url "https://intranet.grm.polymtl.ca/wiki/lib/exe/xmlrpc.php")
   (setq dokuwiki-login-user-name "fiorentino"))
#+END_SRC

- Dokuwiki mode
#+BEGIN_SRC emacs-lisp
  (use-package dokuwiki-mode
   :ensure t
   :mode "\\.dwiki\\'"
   :hook (dokuwiki-mode . outline-minor-mode)
   :bind (:map dokuwiki-mode-map
               ("C-c C-l" . dokuwiki-list-pages)
               ("C-c C-s" . dokuwiki-save-page)))
#+END_SRC

** PDF
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :if (string-match-p "fc" (cond ((not operating-system-release) "") (t operating-system-release)))
  :ensure nil
  :config
  (pdf-loader-install)
  (setq-default pdf-view-display-size 'fit-width))
#+END_SRC

** Latex

- [[https://stackoverflow.com/questions/7587287/how-do-i-bind-latexmk-to-one-key-in-emacs-and-have-it-show-errors-if-there-are-a][Latexmk]]
#+BEGIN_SRC emacs-lisp
(defun run-latexmk ()
  (interactive)
  (let ((TeX-save-query nil)
        (TeX-process-asynchronous nil)
        (master-file (TeX-master-file)))
    (TeX-save-document "")
    (TeX-run-TeX "run-latexmk" "latexmk" master-file)
    (if (plist-get TeX-error-report-switches (intern master-file))
        (TeX-next-error 1 t)
      (minibuffer-message "done"))))
#+END_SRC

- Config
#+BEGIN_SRC emacs-lisp
  (use-package tex
   :defer t
   :ensure auctex
   :mode ("\\.tex\\'" . LaTeX-mode)
   :init
   (setq TeX-auto-save t)
   (setq TeX-parse-self t)
   (setq TeX-source-correlate-start-server t)
   (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
   (setq LaTeX-command-style '(("" "%(PDF)%(latex) --synctex=1 %S%(PDFout)")))
   :hook
   ((LaTeX-mode . TeX-source-correlate-mode)
    (LaTeX-mode . outline-minor-mode)
    (LaTeX-mode . TeX-fold-mode)
    (TeX-after-compilation-finished-functions . TeX-revert-document-buffer)
    (LaTeX-mode . (lambda () (define-key LaTeX-mode-map
      (kbd "C-x C-s") (lambda () (interactive) (save-buffer) (TeX-fold-buffer))))))
   :config
   (add-to-list 'TeX-command-list
     '("Latexmk" "(run-latexmk)" TeX-run-function nil t :help "Run Latexmk") t)
   (add-to-list 'TeX-command-list
     '("Make" "make TEXINPUTS=/usr/share/texmf/tex:$TEXINPUTS" TeX-run-compile nil t :help "Run makefile") t)
   (setq outline-promotion-headings
       '("\\chapter" "\\section" "\\subsection" "\\subsubsection" "\\paragraph" "\\subparagraph")))
#+END_SRC

** Bibtex
[[http://joostkremers.github.io/ebib/][Ebib]] is a BibTeX database manager

- Global keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") 'ebib)
(global-set-key (kbd "M-i") 'ebib-insert-citation)
#+END_SRC

- Config
#+BEGIN_SRC emacs-lisp
(use-package ebib
:ensure t
:config
(require 'org-ebib)
(setq ebib-bib-search-dirs '("~/PhD/Biblio/"))
(setq ebib-preload-bib-files '("~/PhD/Biblio/Library.bib"))
(setq ebib-notes-use-single-file "~/PhD/Biblio/Library.org")
(setq ebib-file-associations '(("pdf" . "evince") ("ps" . "gv")))
(setq ebib-index-window-size 15)
(setq ebib-notes-template "** %T\n:PROPERTIES:\n%K\n:DOI: %D\n:FILE: %F\n:END:\n>|<")
(define-key ebib-multiline-mode-map "\C-c\C-c" 'ebib-cancel-multiline-buffer)
(remove-hook 'ebib-notes-new-note-hook 'org-narrow-to-subtree)
(remove-hook 'ebib-notes-open-note-after-hook 'org-narrow-to-subtree))
#+END_SRC

* Code
** VHDL

- Customize VHDL-mode
#+BEGIN_SRC emacs-lisp
  (defun my-vhdl-mode-hook ()
   (setq vhdl-standard (quote (08 nil)))
   (define-key vhdl-mode-map (kbd "<backtab>") 'vhdl-align-region)
   (define-key vhdl-mode-map " " nil))

  (add-hook 'vhdl-mode-hook 'my-vhdl-mode-hook)
#+END_SRC

** Verilog

#+BEGIN_SRC emacs-lisp
  (use-package verilog-mode
   :mode (("\\.[st]*v[hp]*\\'" . verilog-mode)
          ("\\.f\\'"           . verilog-mode)
          ("\\.psl\\'"         . verilog-mode)
          ("\\.vams\\'"        . verilog-mode)
          ("\\.vinc\\'"        . verilog-mode))
   :config
     (setq verilog-indent-level             4)             ; 3
     (setq verilog-indent-level-module      4)             ; 3
     (setq verilog-indent-level-declaration 4)             ; 3
     (setq verilog-indent-level-behavioral  0)             ; 3
     (setq verilog-indent-level-directive   0)             ; 1
     (setq verilog-case-indent              4)             ; 2
     (setq verilog-tab-always-indent        t)             ; t
     (setq verilog-indent-begin-after-if    nil)           ; t
     (setq verilog-auto-newline             nil)           ; t
     (setq verilog-auto-indent-on-newline   t)             ; t
     (setq verilog-minimum-comment-distance 10)            ; 10
     (setq verilog-indent-begin-after-if    t)             ; t
     (setq verilog-auto-lineup              'declarations) ; 'declarations
     (setq verilog-align-ifelse             t)             ; nil
     (setq verilog-auto-endcomments         nil)           ; t
     (setq verilog-tab-to-comment           nil)           ; nil
     (setq verilog-date-scientific-format   t))            ; t
   #+END_SRC

** TCL

- Associate .sdc & .do files to tcl-mode
#+BEGIN_SRC emacs-lisp
  (use-package tcl
    :ensure nil
    :mode (("\\.tcl\\'" . tcl-mode)
           ("\\.sdc\\'" . tcl-mode)
           ("\\.xdc\\'" . tcl-mode)
           ("\\.do\\'"  . tcl-mode))
    :config
    (setq tcl-application "tclsh")
    :hook (inferior-tcl-mode . (lambda () (local-set-key (kbd "C-l") 'comint-clear-buffer))))
    ;; (add-to-list 'auto-mode-alist '("\\.sdc\\'" . tcl-mode))
    ;; (add-to-list 'auto-mode-alist '("\\.xdc\\'" . tcl-mode))
    ;; (add-to-list 'auto-mode-alist '("\\.do\\'" . tcl-mode))
    ;; (setq tcl-application "tclsh")
    ;; (add-hook 'inferior-tcl-mode-hook
    ;;  (lambda () (local-set-key (kbd "C-l") 'comint-clear-buffer)))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :mode ("\\.py\\'" . python-mode)
  :config
  (setq python-shell-interpreter "python3")
  (setq indent-tabs-mode nil)
  (setq python-indent 4))
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
   (lambda () (setq-default c-default-style "linux"
                            c-basic-offset  4)))
#+END_SRC

** ASM

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.S\\'" . asm-mode))
  (add-hook 'asm-mode-hook
   (lambda () (progn (setq asm-comment-char "//")
                     (setq comment-start "//")
                     (setq comment-add 0))))
#+END_SRC
